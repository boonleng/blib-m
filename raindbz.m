% raindbz.m
%
% A script to generate a simple plot of radar sensitivity for various
% system configurations.
%
% Created by Boon Leng Cheong.
% Copyright (c) 2012 Boon Leng Cheong. All rights reserved.
%

clf

particle = 'rain';
% particle = 'snow';

r = 150; % Plot the sensitivity curves up to r (km)

R = 50e3;   % Special evaluation at range R
%R = 25e3;   % Special evaluation at range R
%R = 150e3;

c = 299792458;

% Waveform / system efficiency
% wav_eff = 1; % 100% efficient
wav_eff = 0.9;
% wav_eff = 0.7;
% wav_eff = 0.31; % Taylor window

if ~exist('xscale','var'), xscale = 'linear'; end

cat_str = {'Trace / light snow / gust front (No rain)',...
	       'Light rain / moderate to heavy snow',...
	       'Moderate rain or sleet showers',...
	       'Moderate to heavy rain or sleet showers',...
	       'Heavy thunderstorms',...
	       'Intense to severe thunderstorms with hail'};
n = numel(cat_str);
catlo = 12.8:10:65;
if strcmp(particle, 'rain')
	K = sqrt(0.93);
elseif strcmp(particle, 'snow')
	K = sqrt(0.176);
else
	fprintf('Unknown particle %s\n', particle)
	return;
end

cc = kron(catlo, [1 1 nan]);

clf
hbg = axes;
zmap = blib('zmap');
zmap = zmap(2:end,:);
tmp = rgb2hsv(get(gcf,'color'));
fig_brightnenss = tmp(3);
if fig_brightnenss > 0.5
	zmap = 0.4*zmap + 0.6*ones(size(zmap));
else
	zmap = 0.6*zmap;
end
imagesc([0.001 r],5:.5:80,(5:.5:80)'*ones(1,2));
caxis([5.5 80.5])
colormap(zmap);

pos = get(gca,'Position');
axes('position',pos);

hold on

%plot(rr,cc,'k--');

NF = 10^(3.0/10);       % Noise Figure
rr = 1e3*(1:0.5:r);

fprintf(['*****************\n',...
         '*    Z M I N    *\n',...
         '*****************\n\n']);
fprintf('Evaluating at range = %.2f km\n\n',1e-3*R);

radars = [];

% radar = struct('name', '500kW 0.8us (OU-PRIME)', ...   % Description
%   'Pmin', 10^(-112/10), ...                            % Minimum detetable signal of the RX in mW (dBm)
%   'lambda', 3e8/5510e6, ...                            % wavelength in meters
%   'Pt', 500e6, ...                                     % TX power in mW (10 ^ 0.1 * (power in dBm))
%   'G', 10^(50/10), ...                                 % Antenna gain (10 ^ 0.1 * (gain in dBi))
%   'theta', 0.45/180*pi, ...                            % Antenna resolution (radian)
%   'PW', 0.8e-6, ...                                    % PW in sec
%   'L', 10^(3.5/10), ...                                % System loss
%   'attrib', []);                                       % Plot attributes, can be empty
% radars = radar;

radars = cat(1, radars, struct('name', '750kW 1.57us (WSR-88D)',         'Pmin', 10^(-112/10), 'lambda', 3e8/2.7e9, 'Pt', 750e6,           'G', 10^(43/10), 'theta', 1.0/180*pi, 'PW', 1.57e-6, 'L', 10^(1/10), 'attrib', struct('Color', [1, 0, 0])));

line_color = [0 0.3 1.0];
radars = cat(1, radars, struct('name', 'PX-10k 800W 67us',               'Pmin', 10^(-110/10), 'lambda', 0.0314,    'Pt', 800e3 * wav_eff, 'G', 10^(42/10), 'theta', 1.4/180*pi, 'PW',   67e-6, 'L', 10^(2/10), 'attrib', struct('Color', line_color)));
radars = cat(1, radars, struct('name', 'PX-10k 800W 1.5us (Fill Pulse)', 'Pmin', 10^(-110/10), 'lambda', 0.0314,    'Pt', 800e3 * wav_eff, 'G', 10^(42/10), 'theta', 1.4/180*pi, 'PW',  1.5e-6, 'L', 10^(2/10), 'attrib', struct('Color', line_color)));

line_color = [0 0.7 0.6];
% radars = cat(1, radars, struct('name', 'PC-10k 800W 67us',               'Pmin', 10^(-110/10), 'lambda', 0.0500,    'Pt', 800e3 * wav_eff, 'G', 10^(42/10), 'theta', 2.8/180*pi, 'PW',   67e-6, 'L', 10^(2/10), 'attrib', struct('Color', line_color, 'LineWidth', 1.5)));
% radars = cat(1, radars, struct('name', 'PC-10k 800W 1.5us (Fill Pulse)', 'Pmin', 10^(-110/10), 'lambda', 0.0500,    'Pt', 800e3 * wav_eff, 'G', 10^(42/10), 'theta', 2.8/180*pi, 'PW',   67e-6, 'L', 10^(2/10), 'attrib', struct('Color', line_color, 'LineWidth', 1.5)));

radars = cat(1, radars, struct('name', 'PX1k 200W 67us',               'Pmin', 10^(-110/10), 'lambda', 0.0314,    'Pt', 200e3 * wav_eff, 'G', 10^(38/10), 'theta', 1.8/180*pi, 'PW',   67e-6, 'L', 10^(2/10), 'attrib', struct('Color', line_color, 'LineWidth', 1.5)));
radars = cat(1, radars, struct('name', 'PX1k 200W 1.5us (Fill Pulse)', 'Pmin', 10^(-110/10), 'lambda', 0.0314,    'Pt', 200e3 * wav_eff, 'G', 10^(38/10), 'theta', 1.8/180*pi, 'PW',  1.5e-6, 'L', 10^(2/10), 'attrib', struct('Color', line_color, 'LineWidth', 1.5)));

% radar = struct('name', '375kW 1.57us (WSR-88D)', ... 
% 	'Pmin', 10^(-112/10), ...
% 	'lambda', 3e8/2.7e9, ...
% 	'Pt', 375e6, ...
% 	'G', 10^(43/10), ...
% 	'theta', 1.0/180*pi, ...
% 	'PW', 1.57e-6, ...
% 	'L', 10^(1/10), ...
% 	'attrib', []);
% radars = cat(1, radars, radar);


% radar = struct('name', '250kW 1.57us (Klystron)', ... 
% 	'Pmin', 10^(-112/10), ...
% 	'lambda', 3e8/2.7e9, ...
% 	'Pt', 250e6, ...
% 	'G', 10^(43/10), ...
% 	'theta', 1.0/180*pi, ...
% 	'PW', 1.57e-6, ...
% 	'L', 10^(1/10), ...
% 	'attrib', struct('Color', [0 0.7 0.0]));
% radars = cat(1, radars, radar);

% radar = struct('name', 'Toshiba (100us)', ... 
% 	'Pmin', 10^(-112/10), ...
% 	'lambda', 3e8/2.7e9, ...
% 	'Pt', 5e6, ...
% 	'G', 10^(45/10), ...
% 	'theta', 1.0/180*pi, ...
% 	'PW', 100e-6, ...
% 	'L', 10^(1/10), ...
% 	'attrib', struct('Color', [1 0.2 0.7]));
% radars = cat(1, radars, radar);

% radar = struct('name', 'Toshiba (Fill, 2us)', ... 
% 	'Pmin', 10^(-112/10), ...
% 	'lambda', 3e8/2.7e9, ...
% 	'Pt', 5e6, ...
% 	'G', 10^(45/10), ...
% 	'theta', 1.0/180*pi, ...
% 	'PW', 2e-6, ...
% 	'L', 10^(1/10), ...
% 	'attrib', struct('Color', [1 0.2 0.7]));
% radars = cat(1, radars, radar);


% radar = struct('name', '5kW 0.5us (CASA IP-1)', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0319, ...
% 	'Pt', 5.2e6, ...
% 	'G', 10^(37/10), ...
% 	'theta', 1.8/180*pi, ...
% 	'PW', 0.46e-6, ...
% 	'L', 10^(1/10), ...
% 	'attrib', struct('Color', [0 0.7 0]));
% radars = cat(1, radars, radar);

% line_color = [1 0.3 1];

% radar = struct('name', '475kW 1.57us (Some Dish)', ... 
% 	'Pmin', 10^(-113/10), ...
% 	'lambda', 0.10, ...
% 	'Pt', 475e6, ...
% 	'G', 10^(46.21/10), ...
% 	'theta', 0.85/180*pi, ...
% 	'PW', 1.57e-6, ...
% 	'L', 10^(0/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);


% radar = struct('name', '1.5kW 15us (PX-1000 TWT)', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 1.5e6, ...
% 	'G', 10^(38.5/10), ...
% 	'theta', 1.8/180*pi, ...
% 	'PW', 15e-6, ...
% 	'L', 10^(3/10), ...
% 	'attrib', []);
% radars = cat(1, radars, radar);


%line_color = [1 1 0];
%line_color = [0.3 0.8 1];
line_color = [0 0.3 1];

% radar = struct('name', 'PX-1000 100W 67us', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 100e3 * wav_eff, ...
%     'G', 10^(38.5/10), ...
% 	'theta', 1.8/180*pi, ...
% 	'PW', 67e-6, ...
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);
% 
% radar = struct('name', 'PX-1000 100W 2us (Fill Pulse)', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 100e3 * wav_eff, ... % 90% efficient waveform, ...
% 	'G', 10^(38.5/10), ...
% 	'theta', 1.8/180*pi, ...
% 	'PW', 2e-6, ...  % Window efficiency
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);

% radar = struct('name', 'PX-1000 200W 67us', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 200e3 * wav_eff, ...
%     'G', 10^(38.5/10), ...
% 	'theta', 1.8/180*pi, ...
% 	'PW', 67e-6, ...
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);
% 
% radar = struct('name', 'PX-1000 200W 2us (Fill Pulse)', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 200e3 * wav_eff, ...
% 	'G', 10^(38.5/10), ...
% 	'theta', 1.8/180*pi, ...
% 	'PW', 2e-6, ...  % Window efficiency
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);

% 
% radar = struct('name', '100W 67us', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 0.31*0.1e6, ... % A factor of 0.31 from kaiser windowing
% 	'G', 10^(38.5/10), ...
% 	'theta', 1.8/180*pi, ...
% 	'PW', 67e-6, ...
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);


% radar = struct('name', '100W 2us (Windowed Fill Pulse)', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 0.1e6, ...
% 	'G', 10^(38.5/10), ...
% 	'theta', 1.8/180*pi, ...
% 	'PW', 2e-6 * 0.394, ...  % Window efficiency
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);

% radar = struct('name', '100W 67us (WL)', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 0.1e6, ...
% 	'G', 10^(46/10), ...
% 	'theta', 1.0/180*pi, ...
% 	'PW', 67e-6, ...
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);
% 
% radar = struct('name', '100W 2us (WL)', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 0.1e6, ...
% 	'G', 10^(46/10), ...
% 	'theta', 1.0/180*pi, ...
% 	'PW', 2e-6, ...
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);

% line_color = [0 0.3 1];

% radar = struct('name', 'PX-1000 200W 67us', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 200e3 * wav_eff, ...
%     'G', 10^(38.5/10), ...
% 	'theta', 1.8/180*pi, ...
% 	'PW', 67e-6, ...
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);
% 
% radar = struct('name', 'PX-1000 200W 2us (Fill Pulse)', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 200e3 * wav_eff, ... % waveform, ...
% 	'G', 10^(38.5/10), ...
% 	'theta', 1.8/180*pi, ...
% 	'PW', 2e-6, ...  % Window efficiency
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);


% Antenna gain = 10 * log10 (32400 / theta / phi * 0.65 (efficiency))

% radar = struct('name', 'Ranger (1m)', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 0.1e6 * eff, ...
% 	'G', 10^(37/10), ...
% 	'theta', 2.0/180*pi, ...
% 	'PW', 67e-6, ...
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', [1 0.3 0.7], 'LineWidth', 1.5));
% radars = cat(1, radars, radar);
% 
% radar = struct('name', 'Ranger (1m, Fill pulse)', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 0.1e6 * wav_eff, ...
% 	'G', 10^(37/10), ...
% 	'theta', 2.0/180*pi, ...
% 	'PW', 2e-6, ...
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', [1 0.3 0.7], 'LineWidth', 1.5));
% radars = cat(1, radars, radar);

% radar = struct('name', 'NOXP 250kW 1us', ...
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 3e8/9415e6, ...
% 	'Pt', 125e6 * wav_eff, ...  % 250W split between H & V
% 	'G', 10^(44.5/10), ...  % In theory, 44.5
% 	'theta', 0.9/180*pi, ...
% 	'PW', 1e-6, ...
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', [1 0.3 0.7], 'LineWidth', 1.5));
% radars = cat(1, radars, radar);
    
% line_color = [0.9 0.6 0];
% 
% radar = struct('name', 'PX-10k 1,200W 67us', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 1200e3 * wav_eff, ...
%     'G', 10^(42.4/10), ...  % H-port
% 	'theta', 1.4/180*pi, ...
% 	'PW', 67e-6, ...
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);
% 
% radar = struct('name', 'PX-10k 1,200W 2us (Fill Pulse)', ... 
% 	'Pmin', 10^(-110/10), ...
% 	'lambda', 0.0314, ...
% 	'Pt', 1200e3 * wav_eff, ... % < 100% waveform, ...
% 	'G', 10^(42.4/10), ...
% 	'theta', 1.4/180*pi, ...
% 	'PW', 2e-6, ...  % Window efficiency
% 	'L', 10^(3/10), ...
% 	'attrib', struct('Color', line_color, 'LineWidth', 1.5));
% radars = cat(1, radars, radar);

% Going through the cases
zz = zeros(numel(radars), numel(rr));

% Censoring SNR in dB
cen = 0;

for ir = 1:numel(radars)
	radar = radars(ir);

	TL = 1 / (NF * radar.L);  % Assume 1-dB atmospheric factor, attenuate Pt, so L should actually be 1/L
    
	%Zmin = (Pmin*1024*log(2)*lambda^2*R^2) / (Pt*G^2*theta^2*PW*pi^3*K^2*TL);
	%Zmin_dB = 10*log10(Zmin*1e9);  % Convert m to mm^6/m^3
    % ^--- Rinehart's book. wrong version! (missing c in the denominator)

	% Zmin = (Pmin*1024*log(2)*lambda^2*R^2) / (Pt*G^2*theta^2*c*PW*pi^3*K^2*TL);
	
	Zmin = (radar.Pmin * 1024 * log(2) * radar.lambda ^ 2 * R ^ 2) / (radar.Pt * radar.G ^ 2 * radar.theta ^ 2 * c * radar.PW * pi^3 * K ^ 2 * TL);
	Zmin_dB = 10 * log10(Zmin * 1e18);  % Convert m to mm^6/m^3
    Zmin_dB = Zmin_dB + cen;

	zz(ir, :) = (radar.Pmin * 1024 * log(2) * radar.lambda ^ 2 .* rr .^ 2) / (radar.Pt * radar.G ^ 2 * radar.theta ^ 2 * c * radar.PW * pi ^ 3 * K ^ 2 * TL);

	r_blind = c*radar.PW/2;
	zz(ir, rr<r_blind) = nan;
	
    if strfind(radar.name, 'Fill')
        [~, idx] = min(abs(rr - r_blind_prev));
        zz(ir, idx:end) = nan;
    end
    
    r_blind_prev = r_blind;

	fprintf('%30s : %6.2f dBZ (PW: %.2e, BR: %.0fm)\n', radar.name, Zmin_dB, radar.PW, radar.PW*3e8/2);
end

%zz_db = 10*log10(1e9*zz); % <-- wrong version!
zz_db = 10*log10(1e18*zz) + cen;
h = plot(1e-3*rr, zz_db);
if strcmp(xscale,'log')
    xx = 1.1;
else
    xx = 0.02*r;
end
ht = text(xx*ones(1,n), catlo(1:n)+5, cat_str);

% Use a mix of white and background color to create transparent look
for idx = 1:numel(ht)
	icolor = round(catlo(idx)/5);
	set(ht(idx), 'Color', 0.7*[1 1 1] + 0.3*zmap(icolor, :));
end

set(ht,'HorizontalAlignment', 'Left');
grid on
xlabel('Range (km)')
ylabel('dBZ')
title(sprintf('Radar Sensitivity Matrix (lower is better) -  |K|^2 = %.3f (%s) ', K ^ 2, particle), 'Fontsize', 14);
text(r, 76, sprintf('Created on %s', datestr(date)), 'HorizontalAlignment', 'Right', 'FontSize', 6)
ylim = [-15 70];
set(gca, 'YDir', 'Normal', ...
    'YTick', -25:5:65, 'YLim', ylim, 'XScale', xscale, 'Color', 'None', 'Box', 'On');
set(hbg, 'YDir', 'Normal', 'YLim', ylim, 'Box', 'Off');
axis(hbg, 'off')

legend({radars.name})

if fig_brightnenss > 0.5
    blib('bsizewin', gcf, [800 400])
	set(ht, 'Color', 'k')
else
	blib('bsizewin',gcf,[680 480])
	set(ht, 'Color', 'w')
end

% Customize line attributes
for ir = 1:numel(radars)
	if ~isfield(radars(ir), 'attrib') || isempty(radars(ir).attrib), tmp = []; else, tmp = fieldnames(radars(ir).attrib); end
	for ia = 1:numel(tmp)
		%fprintf('%s %s\n', tmp{ia}, radars(ir).attrib.(tmp{ia}));
		set(h(ir), tmp{ia}, radars(ir).attrib.(tmp{ia}));
	end
end
